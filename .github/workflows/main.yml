name: Build for All platforms

env:
  ACTIONS_RUNTIME_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# Controls when the workflow will run
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      tags:
        description: 'Build tags'

jobs:
  build_windows:
    if: github.actor == 'badabing2005'
    # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          # python-version: '3.7'
          # python-version: '3.8'
          # python-version: '3.9'
          python-version: '3.10'

      - name: Create virtual environment
        run: python -m venv myenv
        shell: powershell

      - name: Activate virtual environment
        run: .\myenv\Scripts\Activate.ps1
        shell: powershell

      - name: Install wxPython
        # run: pip install https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-20.04/wxPython-4.1.0-cp38-cp38-linux_x86_64.whl
        # run: pip install https://wxpython.org/Phoenix/snapshot-builds/wxPython-4.2.1a1.dev5564+33cabe97-cp37-cp37m-win_amd64.whl
        # run: pip install https://wxpython.org/Phoenix/snapshot-builds/wxPython-4.2.1a1.dev5564+33cabe97-cp38-cp38-win_amd64.whl
        # run: pip install https://wxpython.org/Phoenix/snapshot-builds/wxPython-4.2.1a1.dev5564+33cabe97-cp39-cp39-win_amd64.whl
        run: pip install https://wxpython.org/Phoenix/snapshot-builds/wxPython-4.2.1a1.dev5564+33cabe97-cp310-cp310-win_amd64.whl


      - name: Install requirements
        run: pip install -r requirements.txt

      - name: List modules and their versions
        run: pip freeze

      - name: Build application
        run: .\build.bat

      - name: List contents of dist directory
        run: ls dist

      # Upload artifcats Windows
      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v3
        id: upload_artifacts_windows
        with:
          name: PixelFlasher.exe
          path: dist/PixelFlasher.exe

  build_ubuntu_20_04:
    if: github.actor == 'badabing2005'
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          # python-version: '3.8'
          # python-version: '3.9'
          python-version: '3.10'

      - name: Create virtual environment
        run: python -m venv myenv
        shell: bash

      - name: Activate virtual environment
        run: source myenv/bin/activate
        shell: bash

      - name: Install wxPython
        # run: pip install https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-20.04/wxPython-4.1.0-cp38-cp38-linux_x86_64.whl
        # run: pip install https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-20.04/wxPython-4.1.1-cp38-cp38-linux_x86_64.whl
        # run: pip install https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-20.04/wxPython-4.2.0-cp38-cp38-linux_x86_64.whl
        # run: pip install https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-20.04/wxPython-4.2.0-cp39-cp39-linux_x86_64.whl
        run: pip install https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-20.04/wxPython-4.2.0-cp310-cp310-linux_x86_64.whl


      - name: Install requirements
        run: pip install -r requirements.txt

      - name: List modules and their versions
        run: pip freeze

      - name: Build application
        run: ./build.sh

      - name: List contents of dist directory
        run: ls dist

      # Upload artifcats Ubuntu
      - name: Upload Ubuntu 20.04 Artifact
        uses: actions/upload-artifact@v3
        id: upload_artifacts_ubuntu_20_04
        with:
          name: PixelFlasher_Ubuntu_20_04
          path: dist/PixelFlasher

  build_ubuntu_22_04:
    if: github.actor == 'badabing2005'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          # python-version: '3.8'
          # python-version: '3.9'
          python-version: '3.10'

      - name: Create virtual environment
        run: python -m venv myenv
        shell: bash

      - name: Activate virtual environment
        run: source myenv/bin/activate
        shell: bash

      - name: Install wxPython
        # run: pip install https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-22.04/wxPython-4.2.0-cp38-cp38-linux_x86_64.whl
        # run: pip install https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-22.04/wxPython-4.2.0-cp39-cp39-linux_x86_64.whl
        run: pip install https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-22.04/wxPython-4.2.0-cp310-cp310-linux_x86_64.whl


      - name: Install requirements
        run: pip install -r requirements.txt

      - name: List modules and their versions
        run: python3.10 -m pip freeze

      - name: Build application
        run: ./build.sh

      - name: List contents of dist directory
        run: ls dist

      # Upload artifcats Ubuntu
      - name: Upload Ubuntu 22.04 Artifact
        uses: actions/upload-artifact@v3
        id: upload_artifacts_ubuntu_22_04
        with:
          name: PixelFlasher_Ubuntu_22_04
          path: dist/PixelFlasher

  build_mac_11:
    if: github.actor == 'badabing2005'
    # runs-on: macos-latest
    runs-on: macos-11

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: List Cellar directory Again
        run: |
          ls /usr/local/Cellar

      # - name: Set up Python
        # uses: actions/setup-python@v4
        # with:
          # python-version: '3.9'

      - name: Install wxPython
        run: brew install wxpython

      - name: Install node graphicsmagick imagemagick
        run: brew install node graphicsmagick imagemagick

      - name: Install create-dmg
        run: npm install --global create-dmg

      - name: Add Python 3.10 to PATH
        run: export PATH=/usr/local/Cellar/python@3.10/bin:$PATH

      - name: Create virtual environment
        run: python3.10 -m venv myenv
        shell: bash

      - name: Activate virtual environment
        run: source myenv/bin/activate
        shell: bash

      - name: Install requirements
        run: python3.10 -m pip install -r requirements.txt

      - name: List modules and their versions
        run: python3.10 -m pip freeze

      - name: Build application
        run: ./build.sh

      - name: List contents of dist directory
        run: ls dist

      # Upload artifcats Mac-OS
      - name: Upload Mac-OS 11 Artifact
        uses: actions/upload-artifact@v3
        id: upload_artifact_macos_11
        with:
          name: PixelFlasher.dmg
          path: dist/PixelFlasher.dmg

  deploy:
    if: github.actor == 'badabing2005'
    needs: [build_windows, build_ubuntu_20_04, build_ubuntu_22_04, build_mac_11]

    runs-on: ubuntu-latest

    steps:
      # Create a release
      - name: Create Release
        id: create_release
        # uses: actions/create-release@v1
        uses: ncipollo/release-action@v1.11.1
        # env:
          # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          # release_name: Release ${{ github.ref }}
          # name: Release ${{ github.ref }}
          name: Release ${{ github.ref }}
          allowUpdates: "true"
          draft: false
          prerelease: true

      # Download the Windows artifact from the build_windows job
      - name: Download Windows Artifact
        uses: actions/download-artifact@v4.1.7
        with:
          name: PixelFlasher.exe
          path: dist-windows
        continue-on-error: true

      # Download the Ubuntu_20_04 artifact from the build_ubuntu_20_04 job
      - name: Download Ubuntu_20_04 Artifact
        uses: actions/download-artifact@v4.1.7
        with:
          name: PixelFlasher_Ubuntu_20_04
          path: dist-ubuntu_20_04
        continue-on-error: true

      # Download the Ubuntu_22_04 artifact from the build_ubuntu_22_04 job
      - name: Download Ubuntu_22_04 Artifact
        uses: actions/download-artifact@v4.1.7
        with:
          name: PixelFlasher_Ubuntu_22_04
          path: dist-ubuntu_22_04
        continue-on-error: true

      # Download the Mac-OS artifacts from the build_mac_11 job
      - name: Download Mac-OS Artifacts
        uses: actions/download-artifact@v4.1.7
        with:
          name: PixelFlasher.dmg
          path: dist-mac_11
        continue-on-error: true

      # List the artifacts downloaded
      - name: List contents of dist directory
        run: ls ${{ github.workspace }}/dist*

      # Upload the Windows artifact to release
      - name: Upload Windows Artifact to release
        uses: shogo82148/actions-upload-release-asset@v1
        # uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist-windows/PixelFlasher.exe
          asset_name: PixelFlasher.exe
          asset_content_type: application/zip
          # asset_content_type: application/octet-stream
        continue-on-error: true

      # Upload the Ubuntu 20.04 artifact to release
      - name: Upload Ubuntu 20.04 Artifact to release
        uses: shogo82148/actions-upload-release-asset@v1
        # uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist-ubuntu_20_04/PixelFlasher
          asset_name: PixelFlasher_Ubuntu_20_04
          asset_content_type: application/zip
        continue-on-error: true

      # Upload the Ubuntu 22.04 artifact to release
      - name: Upload Ubuntu 22.04 Artifact to release
        uses: shogo82148/actions-upload-release-asset@v1
        # uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist-ubuntu_22_04/PixelFlasher
          asset_name: PixelFlasher_Ubuntu_22_04
          asset_content_type: application/zip
        continue-on-error: true

      # Upload the Mac-OS 11 artifact to release
      - name: Upload Mac-OS 11 Artifacts to release
        uses: shogo82148/actions-upload-release-asset@v1
        # uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist-mac_11/PixelFlasher.dmg
          asset_name: PixelFlasher.dmg
          asset_content_type: application/zip
        continue-on-error: true

